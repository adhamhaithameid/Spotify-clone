{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;\nvar react_1 = require(\"react\");\nvar types_1 = require(\"./types\");\nvar getStepDecimals = function (step) {\n  var decimals = step.toString().split('.')[1];\n  return decimals ? decimals.length : 0;\n};\nexports.getStepDecimals = getStepDecimals;\nfunction isTouchEvent(event) {\n  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\nexports.isTouchEvent = isTouchEvent;\nfunction isStepDivisible(min, max, step) {\n  var res = (max - min) / step;\n  var precision = 8;\n  var roundedRes = Number(res.toFixed(precision));\n  return parseInt(roundedRes.toString(), 10) === roundedRes;\n}\nexports.isStepDivisible = isStepDivisible;\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n  var BIG_NUM = 10e10;\n  value = Math.round(value * BIG_NUM) / BIG_NUM;\n  if (!allowOverlap) {\n    var prev = values[index - 1];\n    var next = values[index + 1];\n    if (prev && prev > value) return prev;\n    if (next && next < value) return next;\n  }\n  if (value > max) return max;\n  if (value < min) return min;\n  // `remainder` is a difference between the given value and a full step value\n  // that is closest lower to the given value and is in the range between the min value\n  // and the given value\n  var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) % Math.floor(step * BIG_NUM);\n  var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n  var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM;\n  // Values with a remainder `< step/2` are rounded to the closest lower value\n  // while values with a remainder `= > step/2` are rounded to the closest bigger value\n  var res = Math.abs(remainder / BIG_NUM) < step / 2 ? rounded : rounded + step;\n  var decimalPlaces = exports.getStepDecimals(step);\n  return parseFloat(res.toFixed(decimalPlaces));\n}\nexports.normalizeValue = normalizeValue;\nfunction relativeValue(value, min, max) {\n  return (value - min) / (max - min);\n}\nexports.relativeValue = relativeValue;\nfunction isVertical(direction) {\n  return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\nexports.isVertical = isVertical;\nfunction checkBoundaries(value, min, max) {\n  if (min >= max) {\n    throw new RangeError(\"min (\" + min + \") is equal/bigger than max (\" + max + \")\");\n  }\n  if (value < min) {\n    throw new RangeError(\"value (\" + value + \") is smaller than min (\" + min + \")\");\n  }\n  if (value > max) {\n    throw new RangeError(\"value (\" + value + \") is bigger than max (\" + max + \")\");\n  }\n}\nexports.checkBoundaries = checkBoundaries;\nfunction checkValuesAgainstBoundaries(value, min, max) {\n  if (value < min) {\n    // set selectedValue to min\n    return min;\n  }\n  if (value > max) {\n    // set selectedValue to max\n    return max;\n  } else {\n    return value;\n  }\n}\nexports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;\nfunction checkInitialOverlap(values) {\n  if (values.length < 2) return;\n  if (!values.slice(1).every(function (item, i) {\n    return values[i] <= item;\n  })) {\n    throw new RangeError(\"values={[\" + values + \"]} needs to be sorted when allowOverlap={false}\");\n  }\n}\nexports.checkInitialOverlap = checkInitialOverlap;\nfunction getMargin(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['margin-top'], 10),\n    bottom: parseInt(style['margin-bottom'], 10),\n    left: parseInt(style['margin-left'], 10),\n    right: parseInt(style['margin-right'], 10)\n  };\n}\nexports.getMargin = getMargin;\nfunction getPaddingAndBorder(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n    bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n    left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n    right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10)\n  };\n}\nexports.getPaddingAndBorder = getPaddingAndBorder;\nfunction translateThumbs(elements, offsets, rtl) {\n  var inverter = rtl ? -1 : 1;\n  elements.forEach(function (element, index) {\n    return translate(element, inverter * offsets[index].x, offsets[index].y);\n  });\n}\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n  var thumbIndex = 0;\n  var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n  for (var i = 1; i < thumbs.length; i++) {\n    var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n    if (thumbDistance < minThumbDistance) {\n      minThumbDistance = thumbDistance;\n      thumbIndex = i;\n    }\n  }\n  return thumbIndex;\n}\nexports.getClosestThumbIndex = getClosestThumbIndex;\nfunction translate(element, x, y) {\n  element.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n}\nexports.translate = translate;\n// adapted from https://github.com/alexreardon/raf-schd\nvar schd = function (fn) {\n  var lastArgs = [];\n  var frameId = null;\n  var wrapperFn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    lastArgs = args;\n    if (frameId) {\n      return;\n    }\n    frameId = requestAnimationFrame(function () {\n      frameId = null;\n      fn.apply(void 0, lastArgs);\n    });\n  };\n  return wrapperFn;\n};\nexports.schd = schd;\nfunction replaceAt(values, index, value) {\n  var ret = values.slice(0);\n  ret[index] = value;\n  return ret;\n}\nexports.replaceAt = replaceAt;\nfunction getTrackBackground(_a) {\n  var values = _a.values,\n    colors = _a.colors,\n    min = _a.min,\n    max = _a.max,\n    _b = _a.direction,\n    direction = _b === void 0 ? types_1.Direction.Right : _b,\n    _c = _a.rtl,\n    rtl = _c === void 0 ? false : _c;\n  if (rtl && direction === types_1.Direction.Right) {\n    direction = types_1.Direction.Left;\n  } else if (rtl && types_1.Direction.Left) {\n    direction = types_1.Direction.Right;\n  }\n  // sort values ascending\n  var progress = values.slice(0).sort(function (a, b) {\n    return a - b;\n  }).map(function (value) {\n    return (value - min) / (max - min) * 100;\n  });\n  var middle = progress.reduce(function (acc, point, index) {\n    return acc + \", \" + colors[index] + \" \" + point + \"%, \" + colors[index + 1] + \" \" + point + \"%\";\n  }, '');\n  return \"linear-gradient(\" + direction + \", \" + colors[0] + \" 0%\" + middle + \", \" + colors[colors.length - 1] + \" 100%)\";\n}\nexports.getTrackBackground = getTrackBackground;\nfunction voidFn() {}\nexports.voidFn = voidFn;\nfunction assertUnreachable(x) {\n  throw new Error(\"Didn't expect to get here\");\n}\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\nvar getThumbWidth = function (thumbEl, value, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n  var width = Math.ceil(__spreadArrays([thumbEl], Array.from(thumbEl.children)).reduce(function (width, el) {\n    var elWidth = Math.ceil(el.getBoundingClientRect().width);\n    /**\n     * If a label contains a merged label value, it won't return the true\n     * label width for that Thumb. Clone the label and change the value\n     * to that individual Thumb value in order to grab the true width.\n     */\n    if (el.innerText && el.innerText.includes(separator) && el.childElementCount === 0) {\n      var elClone = el.cloneNode(true);\n      elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n      elClone.style.visibility = 'hidden';\n      document.body.appendChild(elClone);\n      elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n      document.body.removeChild(elClone);\n    }\n    return elWidth > width ? elWidth : width;\n  }, thumbEl.getBoundingClientRect().width));\n  return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\nvar getOverlaps = function (index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n  var overlaps = [];\n  /**\n   * Recursive function for building the overlaps Array\n   * If an overlap is found, find the overlaps for that overlap\n   * @param thumbIndex current Thumb index to find overlaps from\n   */\n  var buildOverlaps = function (thumbIndex) {\n    var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n    var thumbX = offsets[thumbIndex].x;\n    /**\n     * Iterate through the Thumb offsets, if there is a match\n     * add the thumbIndex and siblingIndex to the overlaps Array\n     *\n     * Then build overlaps from the overlapping siblingIndex\n     */\n    offsets.forEach(function (_a, siblingIndex) {\n      var siblingX = _a.x;\n      var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n      if (thumbIndex !== siblingIndex && (thumbX >= siblingX && thumbX <= siblingX + siblingWidth || thumbX + thumbXWidth >= siblingX && thumbX + thumbXWidth <= siblingX + siblingWidth)) {\n        if (!overlaps.includes(siblingIndex)) {\n          overlaps.push(thumbIndex);\n          overlaps.push(siblingIndex);\n          overlaps = __spreadArrays(overlaps, [thumbIndex, siblingIndex]);\n          buildOverlaps(siblingIndex);\n        }\n      }\n    });\n  };\n  buildOverlaps(index);\n  // Sort and remove duplicates from the built overlaps\n  return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\nvar useThumbOverlap = function (rangeRef, values, index, step, separator, valueToLabel) {\n  if (step === void 0) {\n    step = 0.1;\n  }\n  if (separator === void 0) {\n    separator = ' - ';\n  }\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n  var decimalPlaces = exports.getStepDecimals(step);\n  // Create initial label style and value. Label value defaults to thumb value\n  var _a = react_1.useState({}),\n    labelStyle = _a[0],\n    setLabelStyle = _a[1];\n  var _b = react_1.useState(valueToLabel(values[index].toFixed(decimalPlaces))),\n    labelValue = _b[0],\n    setLabelValue = _b[1];\n  // When the rangeRef or values change, update the Thumb label values and styling\n  react_1.useEffect(function () {\n    if (rangeRef) {\n      var thumbs = rangeRef.getThumbs();\n      if (thumbs.length < 1) return;\n      var newStyle = {};\n      var offsets_1 = rangeRef.getOffsets();\n      /**\n       * Get any overlaps for the given Thumb index. This must return all linked\n       * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n       * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n       * 2, 3 and 4 also.\n       */\n      var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);\n      // Set a default label value of the Thumb value\n      var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n      /**\n       * If there are overlaps for the Thumb, we need to calculate the correct\n       * Label value along with the relevant styling. We only want to show a Label\n       * for the left most Thumb in an overlapping set.\n       * All other Thumbs will be set to display: none.\n       */\n      if (overlaps.length) {\n        /**\n         * Get an Array of the offsets for the overlapping Thumbs\n         * This is so we can determine if the Thumb we are looking at\n         * is the left most thumb in an overlapping set\n         */\n        var offsetsX = overlaps.reduce(function (a, c, i, s) {\n          return a.length ? __spreadArrays(a, [offsets_1[s[i]].x]) : [offsets_1[s[i]].x];\n        }, []);\n        /**\n         * If our Thumb is the left most Thumb, we can build a Label value\n         * and set the style for that Label\n         */\n        if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n          /**\n           * First calculate the Label value. To do this,\n           * grab all the values for the Thumbs in our overlaps.\n           * Then convert that to a Set and sort it whilst removing duplicates.\n           */\n          var labelValues_1 = [];\n          overlaps.forEach(function (thumb) {\n            labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n          });\n          /**\n           *  Update the labelValue with the resulting Array\n           *  joined by our defined separator\n           */\n          labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) {\n            return parseFloat(a) - parseFloat(b);\n          }))).map(valueToLabel).join(separator);\n          /**\n           * Lastly, build the label styling. The label styling will\n           * position the label and apply a transform so that it's centered.\n           * We want the center point between the left edge of the left most Thumb\n           * and the right edge of the right most Thumb.\n           */\n          var first = Math.min.apply(Math, offsetsX);\n          var last = Math.max.apply(Math, offsetsX);\n          var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n          newStyle.left = Math.abs(first - (last + lastWidth)) / 2 + \"px\";\n          newStyle.transform = 'translate(-50%, 0)';\n        } else {\n          // If the Thumb isn't the left most Thumb, hide the Label!\n          newStyle.visibility = 'hidden';\n        }\n      }\n      // Update the label value and style\n      setLabelValue(labelValue_1);\n      setLabelStyle(newStyle);\n    }\n  }, [rangeRef, values]);\n  return [labelValue, labelStyle];\n};\nexports.useThumbOverlap = useThumbOverlap;\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n  var _a = thumbEl.getBoundingClientRect(),\n    left = _a.left,\n    top = _a.top,\n    width = _a.width,\n    height = _a.height;\n  return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));\n}","map":{"version":3,"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","useThumbOverlap","assertUnreachable","voidFn","getTrackBackground","replaceAt","schd","translate","getClosestThumbIndex","translateThumbs","getPaddingAndBorder","getMargin","checkInitialOverlap","checkValuesAgainstBoundaries","checkBoundaries","isVertical","relativeValue","normalizeValue","isStepDivisible","isTouchEvent","getStepDecimals","react_1","require","types_1","step","decimals","toString","split","event","touches","changedTouches","min","max","res","precision","roundedRes","Number","toFixed","parseInt","index","allowOverlap","values","BIG_NUM","Math","round","prev","next","remainder","floor","closestLowerNum","abs","rounded","decimalPlaces","parseFloat","direction","Direction","Up","Down","RangeError","slice","every","item","element","style","window","getComputedStyle","top","bottom","left","right","elements","offsets","rtl","inverter","forEach","x","y","thumbs","clientX","clientY","thumbIndex","minThumbDistance","getThumbDistance","thumbDistance","transform","fn","lastArgs","frameId","wrapperFn","args","_i","requestAnimationFrame","apply","ret","_a","colors","_b","Right","_c","Left","progress","sort","b","map","middle","reduce","acc","point","Error","getThumbWidth","thumbEl","separator","valueToLabel","width","ceil","from","children","el","elWidth","getBoundingClientRect","innerText","includes","childElementCount","elClone","cloneNode","innerHTML","visibility","document","body","appendChild","removeChild","getOverlaps","overlaps","buildOverlaps","thumbXWidth","thumbX","siblingIndex","siblingX","siblingWidth","push","Set","rangeRef","useState","labelStyle","setLabelStyle","labelValue","setLabelValue","useEffect","getThumbs","newStyle","offsets_1","getOffsets","labelValue_1","offsetsX","c","labelValues_1","thumb","join","first","last","lastWidth","indexOf","height"],"sources":["/Users/adhamhaithameid/Desktop/code/react-tailwind-spotify-clone/node_modules/react-range/lib/utils.js"],"sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;\nvar react_1 = require(\"react\");\nvar types_1 = require(\"./types\");\nvar getStepDecimals = function (step) {\n    var decimals = step.toString().split('.')[1];\n    return decimals ? decimals.length : 0;\n};\nexports.getStepDecimals = getStepDecimals;\nfunction isTouchEvent(event) {\n    return ((event.touches && event.touches.length) ||\n        (event.changedTouches && event.changedTouches.length));\n}\nexports.isTouchEvent = isTouchEvent;\nfunction isStepDivisible(min, max, step) {\n    var res = (max - min) / step;\n    var precision = 8;\n    var roundedRes = Number(res.toFixed(precision));\n    return parseInt(roundedRes.toString(), 10) === roundedRes;\n}\nexports.isStepDivisible = isStepDivisible;\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n    var BIG_NUM = 10e10;\n    value = Math.round(value * BIG_NUM) / BIG_NUM;\n    if (!allowOverlap) {\n        var prev = values[index - 1];\n        var next = values[index + 1];\n        if (prev && prev > value)\n            return prev;\n        if (next && next < value)\n            return next;\n    }\n    if (value > max)\n        return max;\n    if (value < min)\n        return min;\n    // `remainder` is a difference between the given value and a full step value\n    // that is closest lower to the given value and is in the range between the min value\n    // and the given value\n    var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) %\n        Math.floor(step * BIG_NUM);\n    var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n    var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM;\n    // Values with a remainder `< step/2` are rounded to the closest lower value\n    // while values with a remainder `= > step/2` are rounded to the closest bigger value\n    var res = Math.abs(remainder / BIG_NUM) < step / 2\n        ? rounded\n        : rounded + step;\n    var decimalPlaces = exports.getStepDecimals(step);\n    return parseFloat(res.toFixed(decimalPlaces));\n}\nexports.normalizeValue = normalizeValue;\nfunction relativeValue(value, min, max) {\n    return (value - min) / (max - min);\n}\nexports.relativeValue = relativeValue;\nfunction isVertical(direction) {\n    return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\nexports.isVertical = isVertical;\nfunction checkBoundaries(value, min, max) {\n    if (min >= max) {\n        throw new RangeError(\"min (\" + min + \") is equal/bigger than max (\" + max + \")\");\n    }\n    if (value < min) {\n        throw new RangeError(\"value (\" + value + \") is smaller than min (\" + min + \")\");\n    }\n    if (value > max) {\n        throw new RangeError(\"value (\" + value + \") is bigger than max (\" + max + \")\");\n    }\n}\nexports.checkBoundaries = checkBoundaries;\nfunction checkValuesAgainstBoundaries(value, min, max) {\n    if (value < min) {\n        // set selectedValue to min\n        return min;\n    }\n    if (value > max) {\n        // set selectedValue to max\n        return max;\n    }\n    else {\n        return value;\n    }\n}\nexports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;\nfunction checkInitialOverlap(values) {\n    if (values.length < 2)\n        return;\n    if (!values.slice(1).every(function (item, i) { return values[i] <= item; })) {\n        throw new RangeError(\"values={[\" + values + \"]} needs to be sorted when allowOverlap={false}\");\n    }\n}\nexports.checkInitialOverlap = checkInitialOverlap;\nfunction getMargin(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['margin-top'], 10),\n        bottom: parseInt(style['margin-bottom'], 10),\n        left: parseInt(style['margin-left'], 10),\n        right: parseInt(style['margin-right'], 10)\n    };\n}\nexports.getMargin = getMargin;\nfunction getPaddingAndBorder(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n        bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n        left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n        right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10),\n    };\n}\nexports.getPaddingAndBorder = getPaddingAndBorder;\nfunction translateThumbs(elements, offsets, rtl) {\n    var inverter = rtl ? -1 : 1;\n    elements.forEach(function (element, index) {\n        return translate(element, inverter * offsets[index].x, offsets[index].y);\n    });\n}\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n    var thumbIndex = 0;\n    var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n    for (var i = 1; i < thumbs.length; i++) {\n        var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n        if (thumbDistance < minThumbDistance) {\n            minThumbDistance = thumbDistance;\n            thumbIndex = i;\n        }\n    }\n    return thumbIndex;\n}\nexports.getClosestThumbIndex = getClosestThumbIndex;\nfunction translate(element, x, y) {\n    element.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n}\nexports.translate = translate;\n// adapted from https://github.com/alexreardon/raf-schd\nvar schd = function (fn) {\n    var lastArgs = [];\n    var frameId = null;\n    var wrapperFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        lastArgs = args;\n        if (frameId) {\n            return;\n        }\n        frameId = requestAnimationFrame(function () {\n            frameId = null;\n            fn.apply(void 0, lastArgs);\n        });\n    };\n    return wrapperFn;\n};\nexports.schd = schd;\nfunction replaceAt(values, index, value) {\n    var ret = values.slice(0);\n    ret[index] = value;\n    return ret;\n}\nexports.replaceAt = replaceAt;\nfunction getTrackBackground(_a) {\n    var values = _a.values, colors = _a.colors, min = _a.min, max = _a.max, _b = _a.direction, direction = _b === void 0 ? types_1.Direction.Right : _b, _c = _a.rtl, rtl = _c === void 0 ? false : _c;\n    if (rtl && direction === types_1.Direction.Right) {\n        direction = types_1.Direction.Left;\n    }\n    else if (rtl && types_1.Direction.Left) {\n        direction = types_1.Direction.Right;\n    }\n    // sort values ascending\n    var progress = values.slice(0).sort(function (a, b) { return a - b; }).map(function (value) { return ((value - min) / (max - min)) * 100; });\n    var middle = progress.reduce(function (acc, point, index) {\n        return acc + \", \" + colors[index] + \" \" + point + \"%, \" + colors[index + 1] + \" \" + point + \"%\";\n    }, '');\n    return \"linear-gradient(\" + direction + \", \" + colors[0] + \" 0%\" + middle + \", \" + colors[colors.length - 1] + \" 100%)\";\n}\nexports.getTrackBackground = getTrackBackground;\nfunction voidFn() { }\nexports.voidFn = voidFn;\nfunction assertUnreachable(x) {\n    throw new Error(\"Didn't expect to get here\");\n}\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\nvar getThumbWidth = function (thumbEl, value, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var width = Math.ceil(__spreadArrays([thumbEl], Array.from(thumbEl.children)).reduce(function (width, el) {\n        var elWidth = Math.ceil(el.getBoundingClientRect().width);\n        /**\n         * If a label contains a merged label value, it won't return the true\n         * label width for that Thumb. Clone the label and change the value\n         * to that individual Thumb value in order to grab the true width.\n         */\n        if (el.innerText &&\n            el.innerText.includes(separator) &&\n            el.childElementCount === 0) {\n            var elClone = el.cloneNode(true);\n            elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n            elClone.style.visibility = 'hidden';\n            document.body.appendChild(elClone);\n            elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n            document.body.removeChild(elClone);\n        }\n        return elWidth > width ? elWidth : width;\n    }, thumbEl.getBoundingClientRect().width));\n    return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\nvar getOverlaps = function (index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var overlaps = [];\n    /**\n     * Recursive function for building the overlaps Array\n     * If an overlap is found, find the overlaps for that overlap\n     * @param thumbIndex current Thumb index to find overlaps from\n     */\n    var buildOverlaps = function (thumbIndex) {\n        var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n        var thumbX = offsets[thumbIndex].x;\n        /**\n         * Iterate through the Thumb offsets, if there is a match\n         * add the thumbIndex and siblingIndex to the overlaps Array\n         *\n         * Then build overlaps from the overlapping siblingIndex\n         */\n        offsets.forEach(function (_a, siblingIndex) {\n            var siblingX = _a.x;\n            var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n            if (thumbIndex !== siblingIndex &&\n                ((thumbX >= siblingX && thumbX <= siblingX + siblingWidth) ||\n                    (thumbX + thumbXWidth >= siblingX &&\n                        thumbX + thumbXWidth <= siblingX + siblingWidth))) {\n                if (!overlaps.includes(siblingIndex)) {\n                    overlaps.push(thumbIndex);\n                    overlaps.push(siblingIndex);\n                    overlaps = __spreadArrays(overlaps, [thumbIndex, siblingIndex]);\n                    buildOverlaps(siblingIndex);\n                }\n            }\n        });\n    };\n    buildOverlaps(index);\n    // Sort and remove duplicates from the built overlaps\n    return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\nvar useThumbOverlap = function (rangeRef, values, index, step, separator, valueToLabel) {\n    if (step === void 0) { step = 0.1; }\n    if (separator === void 0) { separator = ' - '; }\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var decimalPlaces = exports.getStepDecimals(step);\n    // Create initial label style and value. Label value defaults to thumb value\n    var _a = react_1.useState({}), labelStyle = _a[0], setLabelStyle = _a[1];\n    var _b = react_1.useState(valueToLabel(values[index].toFixed(decimalPlaces))), labelValue = _b[0], setLabelValue = _b[1];\n    // When the rangeRef or values change, update the Thumb label values and styling\n    react_1.useEffect(function () {\n        if (rangeRef) {\n            var thumbs = rangeRef.getThumbs();\n            if (thumbs.length < 1)\n                return;\n            var newStyle = {};\n            var offsets_1 = rangeRef.getOffsets();\n            /**\n             * Get any overlaps for the given Thumb index. This must return all linked\n             * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n             * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n             * 2, 3 and 4 also.\n             */\n            var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);\n            // Set a default label value of the Thumb value\n            var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n            /**\n             * If there are overlaps for the Thumb, we need to calculate the correct\n             * Label value along with the relevant styling. We only want to show a Label\n             * for the left most Thumb in an overlapping set.\n             * All other Thumbs will be set to display: none.\n             */\n            if (overlaps.length) {\n                /**\n                 * Get an Array of the offsets for the overlapping Thumbs\n                 * This is so we can determine if the Thumb we are looking at\n                 * is the left most thumb in an overlapping set\n                 */\n                var offsetsX = overlaps.reduce(function (a, c, i, s) {\n                    return a.length ? __spreadArrays(a, [offsets_1[s[i]].x]) : [offsets_1[s[i]].x];\n                }, []);\n                /**\n                 * If our Thumb is the left most Thumb, we can build a Label value\n                 * and set the style for that Label\n                 */\n                if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n                    /**\n                     * First calculate the Label value. To do this,\n                     * grab all the values for the Thumbs in our overlaps.\n                     * Then convert that to a Set and sort it whilst removing duplicates.\n                     */\n                    var labelValues_1 = [];\n                    overlaps.forEach(function (thumb) {\n                        labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n                    });\n                    /**\n                     *  Update the labelValue with the resulting Array\n                     *  joined by our defined separator\n                     */\n                    labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) { return parseFloat(a) - parseFloat(b); })))\n                        .map(valueToLabel)\n                        .join(separator);\n                    /**\n                     * Lastly, build the label styling. The label styling will\n                     * position the label and apply a transform so that it's centered.\n                     * We want the center point between the left edge of the left most Thumb\n                     * and the right edge of the right most Thumb.\n                     */\n                    var first = Math.min.apply(Math, offsetsX);\n                    var last = Math.max.apply(Math, offsetsX);\n                    var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n                    newStyle.left = Math.abs(first - (last + lastWidth)) / 2 + \"px\";\n                    newStyle.transform = 'translate(-50%, 0)';\n                }\n                else {\n                    // If the Thumb isn't the left most Thumb, hide the Label!\n                    newStyle.visibility = 'hidden';\n                }\n            }\n            // Update the label value and style\n            setLabelValue(labelValue_1);\n            setLabelStyle(newStyle);\n        }\n    }, [rangeRef, values]);\n    return [labelValue, labelStyle];\n};\nexports.useThumbOverlap = useThumbOverlap;\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n    var _a = thumbEl.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;\n    return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}